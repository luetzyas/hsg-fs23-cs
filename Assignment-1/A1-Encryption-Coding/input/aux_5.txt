Alice: Hi Bob, let's communicate via RSA and use generate_prime.py to generate our primes and then multiply them to compute our moduli.

Bob: Great idea, Alice! Let's do something smart! Let's use the date when we met as our common seed to generate our first prime. This way we save energy instead of using a random number generator to generate a seed. We can generate each of the second primes separately.

Alice: Good idea Bob. Here is my modulus and the exponent: 
N_A = 19168426318711055275540770302641880762360574967656328753676297520320426977849894197157472643144533273509527605600977390917078711103107397773537205894975532738169531463304228826310931299244447247251454749101722757023951204884927218680273926681227241686179665072383765583172999890054961287461021056577622775915674549749312603155930195237056677930406649438292523352331760517291977456215417977144691925823687780719839916921084580602519970786908366229543487839904430985962108791141384465315021646701034975083638689425164186750032747241783757136673221838286634145791634053796471153862782397209472687190362333018416144096377
e = 65537

Bob: Thanks Alice. This is my public key:
N_B = 14905584181424599233391938986899594897145311228526110843693800945920626163660879462196102396402391426329038053282497649291228186472650508389491244200009928484554078712984266491000713025966617717960322309319837149595732775183194058186341661205953850806369146803054338168864537416442537228119232494104051535876139588147598122853419965143737702178285669388774119541827362448659681010176274593456763459630722528611554829863337598670442589638886711776944701850864367924516052959247805361890093351241443406335388635751561942071888193114644535613935680183563355913840300787329933940639162899222386956829145789973350060650389
e = 65537

Alice: Great, now we can continue writing in private. Let's use the encrypt.py and decrypt.py scripts to encrypt/decrypt our messages.

Bob: Ok!

Alice:
c_a = 14143719502172644643649558464411393967287131947122988082161440707779842145332187597978444892363072980306215272671364144726107401740139260954651788558405129353838443249398788347023867366001014498542866987064789759166062687366973597679717116392741039456641465261492253185229640159173187175325728685749826215634110571696392092936214347243137238026816563942243301277278341001984661853580130262642923664052116083219452109700337496156613671545661010549061420457815578788786843508962518999900049150965358419685940775901288278609315594929539395403122585359224489526670478371478646043962704157746501384104588383752770762132408

Bob:
c_b = 6025226208674057908900151350965807161478277856888186154046011570370652230208755056494961600336349388309391360744774074309337011775574259536515149686042661540013662087168071149307115316882846251927861672723160899408294203741607007572789581267525339242304365852077119179697201515110772894407185373561134272931102042611237789853508403429410339333645804694017415788211769345416164173474961180433254308877981747967343530105223538546276528462673355819364391854169213916579657543428939237630376332850732297874403373649111245881114042943871368696000995722797273103502517442835904642892599797782077800207628618566576540642652
